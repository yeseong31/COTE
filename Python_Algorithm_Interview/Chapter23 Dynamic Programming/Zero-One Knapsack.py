# 배낭 문제
# 배낭에 담을 수 있는 무게의 최댓값이 정해져 있고,
# 각각 짐의 가치와 무게가 있는 짐들을 배낭에 넣을 때 가치의 합이 최대가 되도록 짐을 고르는 문제

# ----------------------------------------------------------------------------------------------------------------------
# 분할 불가능한 배낭 문제(0-1 배낭 문제)


def zero_one_knapsack(cargo):
    # 최댓값
    capacity = 15
    # 새로운 배낭: (짐의 최대 개수 + 1) x (최대 용량 + 1) -> 6 x 16 크기의 배낭
    pack = []

    # 짐의 개수 i
    for i in range(len(cargo) + 1):
        pack.append([])
        # 현재 배낭의 허용 무게 c
        for c in range(capacity + 1):
            # 짐의 개수가 0 또는 배낭의 용량이 0이라면 아무것도 담을 수 없음
            if i == 0 or c == 0:
                pack[i].append(0)
            # 다음의 경우에서 최댓값을 선택
            # 1. 현재 넣을 물건의 무게만큼 배낭에서 빼고 현재의 물건을 넣음
            # 2. 현재 물건을 넣지 않고 이전의 배낭을 그대로 가져감
            elif cargo[i - 1][1] <= c:
                pack[i].append(
                    max(
                        cargo[i - 1][0] + pack[i - 1][c - cargo[i - 1][1]],
                        pack[i - 1][c]
                    )
                )
            # 현재 배낭의 허용 무게보다 담을 물건의 무게가 더 크다면 넣지 않음
            else:
                pack[i].append(pack[i - 1][c])

    return pack[-1][-1]


cargo = {
    (4, 12),
    (2, 1),
    (10, 4),
    (1, 1),
    (2, 2)
}
r = zero_one_knapsack(cargo)
print(r)
