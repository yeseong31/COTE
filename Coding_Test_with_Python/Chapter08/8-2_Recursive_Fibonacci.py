# 피보나치 수열의 점화식을 재귀 함수로 만드는 방법은 비효율적이다.
# 이러한 문제는 다이너믹 프로그래밍을 사용하면 효율적으로 해결할 수 있다.
# 다만 항상 다이나믹 프로그래밍을 사용할 수는 없으며, 다음 조건을 만족할 때 사용할 수 있다.
#     1. 큰 문제를 작은 문제로 나눌 수 있다.
#     2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

# '메모이제이션 기법' 또는 '캐싱'은 다이나믹 프로그래밍을 구현하는 방법 중 한 종류로,
# 한 번 구한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로 가져오는 기법을 의미한다.

# ---------------------------------------------------------------------------------------------------------------------
# 한 번 계산된 결과를 메모이제이션(Memoization)하기 위한 리스트 초기화
d = [0] * 100


# 피보나치 함수(Fibonacci Function)를 재귀함수로 구현(탑다운 다이나믹 프로그래밍)
def fibo(x):
    if x in (1, 2):
        return 1
    # 이미 계산한 적이 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x - 1) + fibo(x - 2)
    return d[x]


print(fibo(99))

# ---------------------------------------------------------------------------------------------------------------------
# 정리하자면 다이나믹 프로그래밍이란 큰 문제를 작게 나누고, 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘 기법이다.
# 재귀 함수를 이용하는 방법(메모이제이션)에서는 한 번 푼 문제는 그 결과를 저장해 놓았다가
# 나중에 동일한 문제를 풀어야 할 때 이미 저장한 값을 반환한다.

# 다만 재귀 함수를 사용하면 컴퓨터 시스템에서는 함수를 다시 호출했을 때
# 메모리 상에 적재되는 일련의 과정을 따라야 하므로 오버헤드가 발생할 수 있다.
# 따라서 재귀 함수 대신에 반복문을 사용하여 오버헤드를 줄일 수 있다.
# 일반적으로 반복문을 이용한 다이나믹 프로그래밍이 더 성능이 좋기 때문이다.
