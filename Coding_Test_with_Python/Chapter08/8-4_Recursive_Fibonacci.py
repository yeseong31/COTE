# 재귀 함수를 이용해 다이나믹 프로그래밍 소스코드를 작성하는 방법을, 큰 문제를 해결하기 위해 작은 문제를 호출하는 '탑다운 방식(하향식)',
# 반복문을 이용해 소스코드를 작성하는 경우 작은 문제부터 차근차근 답을 도출한다고 하여 '보텀업 방식(상향식)'이라고 한다.

# ---------------------------------------------------------------------------------------------------------------------
# 앞서 계산된 결과를 저장하기 위한 'DP 테이블' 초기화
d = [0] * 100

# 첫 번째 피보나치 수와 두 번째 피보나치 수는 1
d[1] = 1
d[2] = 1
n = 99

# 피보나치 함수(Fibonacci Function)를 반복문으로 구현(보텀업 다이나믹 프로그래밍)
for i in range(3, n + 1):
    d[i] = d[i - 1] + d[i - 2]

print(d[n])

# ---------------------------------------------------------------------------------------------------------------------
# 다이나믹 프로그래밍의 전형적인 형태는 보텀업 방식이다.
# 보텀업 방식에서 사용되는 결과 저장용 리스트는 'DP 테이블'이라고 부르며, 메모이제이션은 탑다운 방식에 국한되어 사용되는 표현이다.
# 메모이제이션은 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념이므로 다이나믹 프로그래밍과는 별개의 개념이다.

# 특정한 문제를 완전 탐색 알고리즘으로 접근했을 때 시간이 매우 오래 걸리면 다이나믹 프로그래밍을 적용할 수 있는지
# 해결하고자 하는 부분 문제들의 중복 여부를 확인해보자.
# 또한 가능하다면 재귀 함수를 이용하는 탑다운 방식보다는 보텀업 방식으로 구현하는 것을 권장한다.
# 시스템상 재귀 함수의 스택 크기가 한정되어 있을 수 있기 때문이다. (sys 라이브러리의 setrecursionlimit() 함수 호출로 제한 해제 가능)
