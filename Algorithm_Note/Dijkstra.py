# <다익스트라 최단 경로 알고리즘>
# 그래프에서 여러 개의 노드가 있을 때, 특정한 노드에서 출발하여 다른 노드로 가는 각각의 최단 경로를 구해주는 알고리즘.
# '음의 간선(0보다 작은 값을 가지는 간선)'이 없을 때 정상적으로 동작
# 그리디 알고리즘으로 분류... 매번 '가장 비용이 적은 노드'를 선택해서 임의의 과정을 반복

#     (1) 출발 노드 설정
#     (2) 최단 거리 테이블 초기화(1차원 리스트)
#     (3) 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드 선택
#     (4) 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블 갱신  -> 그리디 알고리즘의 특성
#     (5) 위 과정에서 (3)과 (4)번을 반복

# 다익스트라 알고리즘의 구현 방법
#     방법 1. 구현하기 쉽지만 동작이 느린 코드
#     방법 2. 구현하기는 조금 더 까다롭지만 동작이 빠른 코드

# ---------------------------------------------------------------------------------------------------------------------
# 다익스트라 최단 경로 알고리즘에서는 '방문하지 않은 노드 중에서 가장 최단 거리가 짧은 노드를 선택'하는 과정을 반복하는데,
# 이렇게 선택된 노드는 '최단 거리'가 완전히 선택된 노드이므로, 더 이상 알고리즘을 반복해도 최단 거리가 줄어들지 않는다.
# 즉 다익스트라 알고리즘이 진행되면서 '한 단계당 하나의 노드에 대한 최단 거리를 확실히 찾는 것'으로 이해할 수 있다.

# ---------------------------------------------------------------------------------------------------------------------
# <방법 1: 간단한 다익스트라 알고리즘>
# 간단한 다익스트라 알고리즘의 시간 복잡도는 O(V^2) (V: 노드의 개수)
# 처음에 각 노드에 대한 최단 거리를 담는 1차원 리스트를 선언한다. 이후에 단계마다 '방문하지 않은 노드 중에서
# 최단 거리가 가장 짧은 노드를 선택'하기 위해 매 단계마다 1차원 리스트의 모든 원소를 확인(순차 탐색)한다.

# 입력되는 데이터의 수가 많다는 가정하에 input()을 sys.stdin.readline()로 치환
# 또한 DBS/BFS에서의 소스코드와 마찬가지로 모든 리스트는 (노드 수 + 1)의 크기로 할당하여 (노드의 번호 = 인덱스) 형태로 함

import sys
input = sys.stdin.readline
INF = int(1e9)

# 노드 개수, 간선 개수
n, m = map(int, input().split())
# 시작 노드 번호
start = int(input())
# 각 노드에 연결되어 있는 노드에 대한 정보를 담는 리스트
graph = [[] for _ in range(n + 1)]
# 방문 체크 리스트
visited = [False] * (n + 1)
# 최단 거리 테이블
distance = [INF] * (n + 1)

# 모든 간선 정보 입력 받기
for _ in range(m):
    a, b, c = map(int, input().split())
    # a -> b: 거리 c
    graph[a].append((b, c))
    
    
# 방문하지 않은 노드 중에서 가장 최단 거리가 짧은 노드의 번호를 return
def get_smallest_node():
    min_value = INF
    idx = 0
    for i in range(1, n + 1):
        if distance[i] < min_value and not visited[i]:
            min_value = distance[i]
            idx = i
    return idx


# 다익스트라 최단 거리 알고리즘
def dijkstra(start):
    # 시작 노드에 대해 초기화
    distance[start] = 0
    visited[start] = True
    for j in graph[start]:
        distance[j[0]] = j[1]
    # 시작 노드를 제외한 전체 n - 1개의 노드에 대해 반복
    for i in range(n - 1):
        # 현재 최단 거리가 가장 짧은 노드를 꺼내서 방문 처리
        now = get_smallest_node()
        visited[now] = True
        # 현재 노드와 연결된 다른 노드 확인
        for j in graph[now]:
            cost = distance[now] + j[1]
            # 현재 노드를 거쳐 다른 노드로 이동하는 거리가 더 짧은 경우
            if cost < distance[j[0]]:
                distance[j[0]] = cost


dijkstra(start)
# 모든 노드로 가기 위한 최단 거리 출력
for i in range(1, n + 1):
    # 도달할 수 없는 경우, INFINITY 출력
    if distance[i] == INF:
        print('INFINITY')
    else:
        print(distance[i])

# 입력 예시
# 6 11
# 1
# 1 2 2
# 1 3 5
# 1 4 1
# 2 3 3
# 2 4 2
# 3 2 3
# 3 6 5
# 4 3 3
# 4 5 1
# 5 3 1
# 5 6 2
# 출력 예시
# 0
# 2
# 3
# 1
# 2
# 4

# ---------------------------------------------------------------------------------------------------------------------
# 시간 복잡도 O(V^2) (V: 노드의 개수)
# 총 O(V)번에 걸쳐서 최단 거리가 가장 짧은 노드를 매번 선형 탐색하고, 현재 노드와 연결된 노드를 매번 일일이 확인하기 때문이다.
# 따라서 코딩 테스트의 최단 경로 문제에서 전체 노드의 개수가 5000개 이하라면 이 코드로 풀어도 상관없다.
# 하지만 노드의 개수가 10000개를 넘어가는 문제라면 이 코드로는 문제를 해결하기 어렵다.
# 노드의 개수 및 간선의 개수가 많을 때는 '개선된 다익스트라 알고리즘'을 이용해야 한다.
